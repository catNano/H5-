[TOC]

# `Day 01`

## 相关的部门

- 产品
- UI
- **前端**
- 后端
- 测试

## 网页的组成

+ 网页的**结构**：图片、文字、线条、超链接、视频
+ 网页的**表现**：网页的衣服：美观、漂亮
+ 网页的**行为**：让元素动起来

## WEB标准：制作网页的标准，web标准是一个集合体，一系列标准集合

		WEB标准:
		网页的结构   ->    HTML语言                	【 W3C 】
		网页的表现   ->    CSS语言         	        【 W3C 】
		网页的行为   ->    JavaScript  [ js ]         【ECMA】

​	补充：web标准由W3C(万维网联盟) 和  ECMA(欧洲电脑网商联合会)组织颁发

## HTML语言

​	HTML汉译：超文本标记语言
​	XHTML汉译：可扩展的超文本标记语言（版本升级的遗留 ）  【语法更加严格】
​	HTML5 : 第5次重大修改

## 站点的创建：（整合网站资源）

​	1：在本地创建一个文件夹即可
​	2：文件夹命名：
​	    a:小写英文字母、数字、下划线的组合
​	    b:不得包含汉字、空格等特殊字符
​	    c:英文字母开头

## 扩展：前端环境

​	1：dev环境：开发环境：外部用户是无法访问，里面的版本跟新变动较大。
​	2：pro环境：生产环境：面向用户，连接上网络，用户可以正常访问。
​	3：test环境：测试环境：外部用户无法访问，对内开发，版本比较稳定。

```
前端工程化搭建环境：
	-| site
		- | src
			-| html
			-| css
			-| js
				-| js
				-| lib
				-| plug
		- | dist
```

## html语言的注释

​	注释（浏览器不加载、提示信息）

```
<!--      注释的内容    -->	
```



# `Day 02`

## 常用标签

1、文本标题标签 h1~h6

+ h1具有唯一性，每个页面只能出现一次，一般用来包裹logo
+ 标题标签不能互相嵌套

2、字体倾斜 

```
<i></i>
<em></em>     具有语气强调的作用
```

3、字体加粗

```txt
<b></b>     h5里面不被推荐使用
<strong></strong>     具有语气强调的作用，表示着重
```

4、下划线

```txt
<u></u>
```

5、强制换行符

```
<br>
说明：浏览器只要遇到br，把后面的内容放在下一行显示。
```

6、水平线

```
<hr>
（不常用：后期线条都是用css边框实现）
```

7、上标与下标

```
<sup></sup>
<sub></sub>
```

8、字符

```
<span></span>
表示一个字符或者是一小段文本
```

9、段落

```
<p></p>
注：p标签里面不能嵌套h1 - h6
```

10、常用的转义字符

```
不换行的空格    &nbsp;
左右尖角号      &gt;    &lt;
网站的备案图标  &copy;
```

11、划分网页区域

```
<div></div>
```

## HTML中的列表

1、无序列表

```
        <ul>
            <li></li>
            <li></li>
            <li></li>
            <li></li>
            <li></li>
        </ul>
        注：
          1：所有的列表符号都需要清除
          2：应用： 新闻条、网页主导航条
```

2、有序列表

```
		<ol>
            <li></li>
            <li></li>
            <li></li>
            <li></li>
            <li></li>
        </ol>

        注：
            列表符号可以通过type属性更改：属性值  a  A   i  I
            制定开始的序号  start  属性值必须是数字，表示从第几个开始
```

3、自定义列表

```
        <dl>
            <dt>名词</dt>
            <dd>对名词的解释</dd>
        </dl>
```

## 超链接

1、超链接

```
    <a></a>
        属性：
            href=""  跳转目标地址
            target=""   是否弹出新窗口打开连接
                属性值：_blank    _self (默认值)

            title=""  提示信息 （大部标签都能支持title属性）
```

2、空连接

```
        <a href="#">空连接</a>

    如果用a模拟按钮的时候，a是可以绑定一些其他的功能
        <a href="javascript:void(0);"></a>
        
    默认样式：字体是蓝色、点击的时候是红色、点击过后是紫色、下划线
```

3、扩展

```
    a里面属性     rel="nofollow"
    自己的网站有其他网站的连接，可以再其他网址a上面 添加rel="nofollow"防止权重外流。
    举例说明：如果A网页上有一个链接指向B网页，但A网页给这个链接加上了rel=”nofollow” 标注，则搜索引擎不把A网页计算入B网页的反向链接

    网站排名的PR值：
        a 跳转 到 B ，a给b投了一票。
```

## 图片

1、网页中图片的显示形式：

- 导入的图片 html
- 背景图 CSS

2、图片的导入

```
        <img>
            html属性：
                src="路径"   图片的路径
                width=""     图片的宽
                height=""    图片的高
                border=" "   图片的边框

                alt=""
                title=""
                
        alt属性的作用：
            1：当图片加载不出来用alt里面的文本替换图片
            2：alt里面的文本小于100个字符
            3：alt属性是img标签里面必须的属性，如果没有文本空着即可
            4：搜索引擎是检索不到图片上面的文字，alt就是做优化。

        title属性作用：
            1：title属性不是必须的
            2：增加用户体验，鼠标放在图片上面有提示信息。
```

3、相对路径的写法

```
        同级文件找同级文件

                    ./目标文件.后缀
        
        父级文件找子级文件

                    ./进入文件夹的名称/目标.后缀

        子级文件找父级文件

                    ../目标.后缀
                    
        ./     当前路径
        ../    返回上一级
```

## 表格

- 表格：行和列 单元格
- 表格的作用：显示数据

```
            table是表格    tr行    td列

            <table>
                <tr>
                    <td></td>
                </tr>
            </table>
            
            table表格里面的html属性：
            width
            height
            border
            bordercolor   边框颜色
            bgcolor    背景颜色

            cellspacing=""  单元格与单元格之间的间距
            cellpadding=""  单元格和内容之间的间距

            align=""   水平对齐方式
                    属性值：left  right   center

            valign=""  垂直对齐方式
                    属性值： top   bottom  middle
```

- 表格内部标签

```
    th标签    ->    每一列的标题
        默认的样式：文本加粗、左右居中


    caption标签   ->  表格标题     
```

- 合并单元格

```
    表格html属性：
        colspan="所合并的单元格数量"   合并列
        rowspan="所合并的单元格数量"   合并行

    注：无论colspan还是rowspan  操作的都是td


    怎么判断合并行还是列：
        只要跨行的都是合并行
        没有跨行的都是合并列
        和哪个td合并，就删除哪个td
        如果既合并行又合并列，尽量先合并列，再合并行
```

- 数据行数据列分组

```
    数据行分组：
        <thead></thead>  表头
        <tbody></tbody>  表体
        <tfoot></tfoot>  表尾

        注：在一个表格内部 只能有一个thead\tfoot  但是可以出现多个tbody


    数据列分组（了解）
        <colgroup span="把几列分成一组"></colgroup>
```

## 表单

- 表单作用：收集用户信息

```
    每一个表单是form
        属性：
            action=""  接口地址
            name=""    表单的名称
            method="get/post"  数据提交方式
```

- 表单元素

```
        文本框(输入框)   <input type="text">
        密码框          <input type="password">
        提交按钮        <input type="submit">
        重置按钮        <input type="reset">
        空按钮          <input type="button">
        单选按钮        <input type="radio">  注：每一组单选按钮，name属性保持一致
        多选按钮        <input type="checkbox">
        上传文件框      <input type="file">
        下拉菜单        <select>
                            <option></option>
                            <option selected></option>
                            <option></option>
                        </select>

        多行文本域       <textarea></textarea>
                        cols="30" rows="10"   字符为单位的宽高
                        禁止用户拖拽框的大小  resize:none;  css属性
```

- input里面的属性

```
        type属性：决定了input在页面中的显示状态
        value属性：根据input显示状态的不同，作用也是不一样的、input的值
        maxlength属性： 内容的最大长度
        name属性：  当前表单元素的名称
        size属性：  字符为单位控制input的大小
```

- 单选、多选按钮的属性

```
        默认选中    checked="checked"
        禁止选中    disabled="disabled"
```

- 表单内部的标签

```
    fieldset
        表单字段集
        对表单元素进行分组，fieldset之间可以互相嵌套
        默认样式：有边框


    legend
        表单字段集标题
        一般放在fieldset第一个子元素位置


    label 标签
        做提示信息的：把提示信息放在label里面

        有个for属性 属性值为一个元素的ID名（暂时不用管）
```

- 注：每个表单元素每一行最好放在一个P标签里面

## get / post的区别

```
1.get一次传输完数据（header+data，post先发送header，收到响应后，再发送data
2.get是直接把参数放在URL之后，post放在数据包中
3.get请求有大小限制，不同的浏览器和服务器对大小的限制是不同的，post请求没有大小限制
4.get请求只产生一个数据包，post请求产生两个
5.get一般用来从服务器端获取数据，post一般用来提交数据
6.get是幂等的，即读取同一个资源，总是得到相同的数据，post，因为每次请求对资源的改变并不是相同的；进一步地，get不会改变服务器上的资源，而post会对服务器资源进行改变；

误区：post比get安全
他们都不安全，因为http本身是明文协议，这两种传输方式在底层没有区别，除非加密（HTTPS）

(1). 从功能上讲，GET一般用来从服务器上获取资源，POST一般用来更新服务器上的资源；
(2). 从REST服务角度上说，GET是幂等的，即读取同一个资源，总是得到相同的数据，而POST不是幂等的，因为每次请求对资源的改变并不是相同的；进一步地，GET不会改变服务器上的资源，而POST会对服务器资源进行改变；
(3). 从请求参数形式上看，GET请求的数据会附在URL之后，即将请求数据放置在HTTP报文的 请求头 中，以?分割URL和传输数据，参数之间以&相连。特别地，如果数据是英文字母/数字，原样发送；否则，会将其编码为 application/x-www-form-urlencoded MIME 字符串(如果是空格，转换为+，如果是中文/其他字符，则直接把字符串用BASE64加密，得出如：%E4%BD%A0%E5%A5%BD，其中％XX中的XX为该符号以16进制表示的ASCII)；而POST请求会把提交的数据则放置在是HTTP请求报文的 请求体 中。
(4). 就安全性而言，POST的安全性要比GET的安全性高，因为GET请求提交的数据将明文出现在URL上，而且POST请求参数则被包装到请求体中，相对更安全。
(5). 从请求的大小看，GET请求的长度受限于浏览器或服务器对URL长度的限制，允许发送的数据量比较小，而POST请求则是没有大小限制的。
```

# `Day 03`

## CSS

```
CSS(cascading style sheet) 汉译为层叠样式表,是用于控制网页样式

WEB标准中的表现标准语言,在网页中主要对网页信息的显示进行控制。
目前推荐遵循的是W3C发布的CSS3.0版本；
用来表现HTML或者XHTML等样式文件的计算机语言。
1998年5月21日由w3C正式推出的css2.0
```

## HTML+CSS

```
弥补html语言的不足
缩减页面代码，提高访问速度;
代码减少，页面文件就会小，占用网络带宽就少，客户端打开速度就快，用户体验就会更好
结构清晰，有利于seo优化
有利于搜索引擎优化
缩短改版时间
对网站的重构有很好的支持
```

## CSS语法

```
CSS语法由两部分组成：选择符、声明。
	声明包括：属性和属性值
选择符 {属性: 属性值 ;属性:属性值}


选择符说明：CSS选择符（选择器）
选择符表示要定义样式的对象(标签名字)，可以是元素本身，也可以是一类元素或者制定名称的元素,简单来说就是给对应的元素起个名称。
```

```
1）每个CSS样式由两部分组成，即选择符和声明，声明又分为属性和属性值；
2）属性必须放在花括号中，属性与属性值用冒号连接。
3）每条声明用分号结束。
4）当一个属性有多个属性值的时候，属性值与属性值不分先后顺序,用空格隔开。
5）在书写样式过程中，空格、换行等操作不影响属性显示。
```

## CSS样式表

1. 内部样式表

   ```
   语法：
       <style type="text/css">
            css语句 
       </style>
   
   注：使用style标记创建样式时，最好将该标记写在<head></head>;
   ```

2. 外部样式

   ```
   (1)  语法：<link rel="stylesheet" type="text/css" href="目标文件的路径及文件名全称" />
   
   说明：使用link元素导入外部样式表时，需将该元素写在文档头部，即<head>与</head>之间。
         rel：用于定义文档关联，表示关联样式表；
         type：定义文档类型；
         
         
   (2)、导入外部样式表
         <style type="text/css">
   			@import  url("目标文件的路径及文件名全称");
   	  </style>
   
   说明：@和import之间没有空格 url和小括号之间也没有空格；括号内部加引号，必须结尾以分号结束；
   ```

   ```
   link @import区别
   差别1：老祖宗的差别：link属于XHTML标签，而@import完全是CSS提供的一种方式。 link标签除了可以加载CSS外，还可以做很多其它的事情，比如定义RSS，定义rel连接属性等，@import就只能加载CSS。
   
   差别2：加载顺序的差别：当一个页面被加载的时候（就是被浏览者浏览的时候），link引用的CSS会同时被加载，而@import引用的CSS 会等到页面全部被下载完再被加载。所以有时候浏览@import加载CSS的页面时开始会没有样式。
   
   差别3：兼容性的差别。：@import是CSS2.1提出的，所以老的浏览器不支持，@import只在IE5以上的才能识别，而link标签无此问题。
   
   差别4：使用dom控制样式时的差别：当使用javascript控制dom去改变样式的时候，只能使用link标签，因为@import不是dom可以控制的.
   ```

3. 内联样式表

   ```
   <标签    style="属性1:值1;属性2:值2; ……"></标签>
   ```

## CSS样式表的权重关系

```
1）内联样式表的优先级别最高
2）内部样式表与外部样式表的优先级和书写的顺序有关，后书写的优先级别高。
3）同在一个样式表中的优先级和书写的顺序也有关，后书写的优先级别高。(被覆盖的只是相同属性的样式)
```

## CSS选择符

```
CSS基本选择符：类型选择符、id选择符、class选择符(类选择符)

Css选择符分类：
    类型选择符（标记选择器）
    类选择符 （class选择符）
    ID选择符 （id选择器）
    伪类选择器
    通配符（*）设置全局属性
    群组选择符（集合选择器）
    包含选择符（后代选择器）
    属性选择符
    伪对象选择符
```

1. 类型选择符

   ```
   类型选择符是根据html语言中的标记来直接定义
   语法：标签名称 {属性：属性值；}
   
   a)类型选择符就是以文档对象html中的标签作为选择符，即使用结构中元素名称作为选择符。例如body、div、p,img,em,strong,span......等。
   b)所有的页面元素都可以作为选择符;
   用法：
   （1）如果想改变某个元素的默认样式时，可以使用类型选择符；（如：改变一个p段落样式）
   （2）当统一文档某个元素的显示效果时，可以使用类型选择符；（如：改变文档所有p段落样式）
   ```

2. 类（class）选择符

   ```
   语法 ：  .class名{属性：属性值;}
   
   用法：class选择符更适合定义一类样式；
   (1)当我们使用类选择符时，应先为每个元素定义一个类名称，
   (2)类选择符的语法格式：
           如：<div class="top"></div>
                  .top{属性:属性值;}
   ```

3. ID选择符

   ```
   语法： <标签 id=“名”></标签>
         #id名{属性：属性值;}
   
   （1）可以给每个元素使用id选择符，但id是元素的唯一标识符，不可出现重复的id名；
         如：<div id="top"></div>
   （2）id选择符的语法格式是“#”加上自定义的id名
         如：#box{width:300px; height:300px;}
    (3) 起名时要取英文名，不能用关键字：(所有的标记和属性都是关键字)
         如：div标记
    (4)一个id名称只能在文档中出现一次，因为id是唯一的
    (5) 最大的用处：创建网页的外围结构。(唯一性、起名字不能使用关键字)
   ```

4. 伪类选择器

   ```
   a:link {color: red;}                    /* 未访问的链接状态 */
   a:visited {color: green;}				/* 已访问的链接状态 */
   a:hover {color: blue;}                  /* 鼠标滑过链接状态 */
   a:active {color: yellow;}               /* 鼠标按下去时的状态 */
   
   说明：
   1）当这4个超链接伪类选择符联合使用时，应注意他们的顺序，正常顺序为：
   a，a:link,a:visited,a:hover,a:active,错误的顺序有时会使超链接的样式失效；
   2）为了简化代码，可以把伪类选择符中相同的声明提出来放在a选择符中；
   例如：a{color:red;}     a:hover{color:green;} 
   表示超链接的三种状态都相同，只有鼠标划过变化颜色
   ```

5. 通配符

   ```
   语法：*{属性：属性值;}
   
   说明：通配选择符的写法是“*”，其含义就是所有标签；    
   		表示该样式适用所有网页元素；
   
   用法：常用来重置样式。
   例：*{margin:0;padding:0;}
   ```

6. 群组选择器

   ```
   语法：选择符1，……，选择符5 {属性：属性值;}
   
   说明：当有多个选择符应用相同的样式时，可以将选择符用“，”分隔的方式，合并为一组。
      
        实例：.top, #nav, p{width:100px;}
   ```

7. 包含选择器（后代选择器）

   ```
   语法：选择符1(父)  选择符2（后代）{属性：属性值;} 
                      选择符父级  选择符子级{属性：属性值;}
   
   说明：选择符1和选择符2用空格隔开，含义就是选择符1中包含的所有选择符2;
   	实例： div   ul  li{height:200px;}
   ```

## 选择符权重

```
css中用四位数字表示权重，
权重的表达方式如：0，0，0，0；
    权重规则：HTML标签(类型选择符)的权重是1，class的权重是10，id的权重是100。
    类型选择符的权重为0001
    class选择符的权重为0010
    id选择符的权重为0100
    属性选择符的权重为0010
    伪类选择符的权重为0010
    伪元素（对象）选择符的权重为0001
    包含选择符的权重：为包含选择符的权重之和
    内联样式的权重为1000
    继承样式的权重为0000
    群组集合选择符权重为他本身
     注：如果权重相同时，则执行后写的样式；
```

# `Day 04`

## CSS层叠性

```
css层叠指的是样式的优先级，当产生冲突时以优先级高的为准。

1. 开发者样式>读者样式>浏览器样式（除非使用!important标记 ）
2. id选择符>（伪）类选择符>元素选择符
3. 权重相同时取后面定义的样式
```

## CSS属性

```
属性：属性是指定选择符所具有的属性，它是css的核心，css2共有150多个属性
属性值：属性值包括法定属性值及常见的数值加单位，如25px，或颜色值等。
```

## 文本属性

1.文本大小 font-size

```
说明：
	a: 文本默认大小：为了减少系统之间的差异，确定16px为标准文字大小
        b：pc端文本大小尽量设置成偶数
        c: PC端文字大小尽量别低于12px
        d：PS中汉字的文本大小，量取文本高度即可（同等字号的英文和数字比汉字显示的要小）
        e: 单位：  px   pt（磅）   em   rem
                9pt == 12px
                em 相对大小单位（根据父元素制定 如：父元素font-size:20px; 子元素1em 					== 20px    em默认  1em == 16px）
                rem 相对大小单位（根据html的font-size值 ）
        d：关键字 
            xx-small =9px
            x-small =11px
            small =13px
            medium =16px
            large =19px
            x-large =23px
            xx-large =27px
        e: 文字的 顶线、基线、中线、底线
```

2.文本颜色 color

```
颜色值：
	a: 16进制表示颜色值
		0 - 9 a - f
			表示颜色值：
				#3个或者6个16进制字符
				#ff0000   ->  简写 #f00
				0 最暗的颜色   f最亮的颜色

	b: rgb（）模式
		rgba(255,0,0,0.5)  颜色半透明

	c: HSL() 饱和度       
		HSLA()  a代表透明
		色相、饱和度、亮度
		H：Hue(色调)。0(或360)表示红色，120表示绿色，240表示蓝色，也可取其他数值来指定颜色。取值为：0 - 360
		S：Saturation(饱和度)。取值为：0.0% - 100.0%
		L：Lightness(亮度)。取值为：0.0% - 100.0%
		A：Alpha透明度。取值0~1之间。
```

3.文本类型 font-family:字体1，字体2，字体3......

```
说明：
	浏览器首先会寻找字体1、如存在就使用改字体来显示内容，如在字体1不存在的情况下，则会寻找字体2，如字体2也不存在，按字体3显示内容，如果字体3 也不存在；则按系统默认字体显示；
	当字体是中文字体时，需加双引号；
	当英文字体中有空格时，需加双引号如（“Times New Roman”）
	当英文字体只有一个单词组成是不加双引号；如：（Arial）；
	Windows中文版本操作系统下，中文默认字体为宋体或者新宋体，英文字体默认为Arial.
```

4.文字加粗 font-weight

```
文本的加粗
	属性值：
		bold 加粗显示
		bolder 更粗的
		normal 不让加粗
		100 - 900   9个等级（100-400一般 500常规 600-900加粗）
```

5.font-style

```
font-style：italic/oblique/normal（取消倾斜，常规显示）;
说明：

italic和oblique都是向右倾斜的文字, 但区别在于Italic是指斜体字，而Oblique是倾斜的文字，对于没有斜体的字体应该使用Oblique属性值来实现倾斜的文字效果.
```

6.文字行高 line-height

```
文本的行高：
   a：line-height:40px;  让文本在40px  上下居中
   b: ps中量取行高： 从第一行的开始量到第二行的开始。
   c: 让单行文本在容器里面上下的对齐：
   		1》如果line-height等于容器高度，文本居中
   		2》如果line-height大于容器高度，文本向下
   		3》如果line-height小于容器高度，文本向上
	d: 如果单行文本撑开容器高度，文本上下会产生误差（基线、顶线、中线、底线） 容器				不设置高，清除单行文字撑开的误差：line-height设置成文字大小。
```

7.文本大小、文本行高、字体类型简写

```
*文字属性简写：font:12px/24px "宋体";
font属性的简写：字号，行高，字体
font-size:12px; line-height:24px; font-family:”宋体”；
font属性的简写：
说明:font的属性值应按以下次序书写(各个属性之间用空格隔开)
顺序: font-style font-weight font-size / line-height font-family
注意：

(1)简写时 , font-size和line-height只能通过斜杠/组成一个值，不能分开写。
(2) 顺序不能改变 ,这种简写法只有在同时指定font-size和font-family属性时才起作用,而且,你没有设定font-weight , font-style , 他们会使用缺省值（默认值）。
```

8.水平对齐方式

```
text-align:left/right/center/justify（两端对齐中文不起作用）
```

9.文本修饰

```
text-decoration:
说明：
	none:没有修饰
	underline:添加下划线
	overline:添加上划线
	line-through:添加删除线
```

10.首行缩进

```
1）text-indent可以取负值；
2）text-indent属性只对第一行起作用。
```

11.字间距，词间距

```
字间距{letter-spacing:value;}控制英文字母或汉字的字距。

词间距{word-spacing:value;}控制英文单词词距。
```

## 列表属性

1.定义列表符号样式

```
list-style-type：disc(实心圆)/circle(空心圆)/square(实心方块)/none(去掉列表符号)；list-style-type:none===list-style:none;
```

2.使用图片座位列表符号

```
list-style-image：url(所使用图片的路径及全称)；
```

3.定义列表符号的位置：

```
list-style-position:outside(外边)/inside(里边)；
```

注：列表符号，都是用背景图实现

## 边框属性

```
    1:边框的位置：长在元素宽高以外的。
    2：border:10x solid blue   复合式写法
        border-width:10px;
        border-style:solid;
        border-color:blue;

        边框类型：
            solid(实线)  
            dashed(虚线)  
            dotted(点状线)
            double(双线)
            none/0
    3: 给单一一个方向设置边框
        border-left:10px solid red;
        border-right:10px solid red;
        border-top:10px solid red;
        border-bottom:10px solid red;

    4: 设置方法：
        border-width
        border-style
        border-color
        以上三个属性都能单独拿出进行设置。每一个属性最多能接收4个值。
            一个值   四周
            两个值   上下    左右
            三个值   上   左右   下
            四个值   上右下左

    5: 用边框拼出三角形
        透明色：  transparent
```

## 背景属性

```
    background:;  简写形式

    1：背景色
        background-color:;

    2:背景图
        background-image:url(图片的路径);
        a：背景图的显示形式：
            容器大于背景图的时候，直到铺满位置
            容器等于等于背景图，正好显示一张
            容器小于背景图，只显示容器区域
            
            注：背景图是不占据空间的。
               网页上有两种图片形式：插入图片、背景图；
               插入图片：属于网页内容，也就是结构。
               背景图：属于网页的表现，背景图上可以显示文字、插入图片、表格等。

    3:控制背景图是否平铺
        background-repeat:;
            属性值：
                repeat   平铺
                no-repeat 不平铺
                repeat-x  横向平铺
                repeat-y  纵向平铺

    4:控制背景图的位置：
        background-position:;
            属性值为两个：
                第一个控制左右
                第二个控制上下

                100px 200px    距离左侧100px  距离顶端200px
                -100px -50px   往左走100px  往上走50px
                center         左右上下居中
                left   center  在左侧 处于上下居中

    5:背景图的固定：
        background-attachment:
            属性值：
                scroll (滚动)
                fixed  (固定)


    6:简写形式:
        background:颜色值 url() no-repeat right center;
        
	7：网页上常用的图片格式（压缩图片）
		1)jpg :有损压缩格式，靠损失图片本身的质量来减小图片的体积，适用于颜色丰富的图像;	(像素点组成的，像素点越多会越清晰 )如果网页中
		2）gif：有损压缩格式，靠损失图片的色彩数量来减小图片的体积，支持透明，支持动画，适		用于颜色数量较少的图像;
		3)png:有损压缩格式，损失图片的色彩数量来减小图片的体积，支持透明，不支持动画，是		fireworks的源文件格式，适用于颜色数量较少的图像;
```

## 表格属性

```
    1：让相邻单元格边框合并或分开，添加在table上面
        border-collapse:
            属性值：
                collapse （合并）
                separate (分开)
		说明：单元格间距(该属性必须给table添加) 表示单元格边框之间的距离， 不可取负值
    2: 相邻单元格边框之间的间距 ,添加在table上面
        border-spacing:;
		说明：合并相邻单元格边框 (该属性必须给table添加) separate(边框分开)默认值； 	collapse(边框合并)

    3: 当单元格没有内容的时候，是否显示单元格区域
        empty-cells:
            属性值：
                show
                hide
		说明：定义当单元格无内容时，是否显示该单元格的边框区域；show：显示 ；hide：隐藏；
    4:显示单元格行和列的算法（加快运行的速度）
        table-layout:
            属性值：
                auto:自动状态
                    执行逻辑：单元格宽度的分配，默认情况下：首先判断内容量，如果内容多，					分配的宽度大，如果内容少分配的宽度少。
                    缺陷：性能消耗大

                fixed:固定：
                    执行逻辑：并不是把宽度固定死，而是不会根据内容的量来分配宽度。
```

## 浮动

```
float:;
	属性值:
		left
		right
		none
		
    1：浮动之后的元素是不占据空间的。
    2：如果多个子元素横向排列，需要给这些子元素都添加浮动。a:
    3: 浮动的注意事项：
        a: 子元素有浮动，父元素暂时必须要添加高度（否则会出现父元素高度坍塌）。
        b: 多个元素有浮动，外层必须套一个父元素。
```

## CSS属性继承

```
不可继承的：display、margin、border、padding、background、height、min-height、max- height、、min-width、max-width、overflow、position、left、right、top、 bottom、z-index、float、clear、table-layout、vertical-align

所有元素可继承：visibility和cursor。
内联元素可继承：letter-spacing、word-spacing、line-height、color、font、 font-family、font-size、font-style、font-variant、font-weight、text- decoration、text-transform。
块状元素可继承：text-indent和text-align
列表元素可继承：list-style、list-style-type、list-style-position、list-style-image。
表格元素可继承：border-collapse。
```

# `Day 05`

## 盒模型

```
盒模型是css布局的基石，它规定了网页元素如何显示以及元素间相互关系。css定义所有的元素都可以拥有像盒子一样的外形和平面空间。即都包含内容区、补白（填充）、边框、边界(外边距)这就是盒模型。
```

## Padding

```
padding用法:
	1：padding是在盒子里面，在盒子与内容之间。
	2：padding的作用：控制子元素在父元素里面的位置关系。
	3：padding会把盒子撑大。
	4：如果想让盒子保持原有的大小：在宽高基础上减掉。（ 如果一个元素是被内容撑开的，没有设置固定的宽高，padding直接撑开。不用减掉 ）
	5:如果给单一方向添加padding
		padding-top/bottom/left/right
	6:padding的设置特点：
				padding:30px;    四周
				padding:10px 30px;     上下     左右
				padding:10px 30px 50px    上   左右    下
				padding:10px 30px 50px 100px     上右下左
	7:padding不会对背景图的位置造成影响。
	8：padding不能设置负值。
    9: 如果父元素没有设置width\height 被内容撑开的高度，添加padding之后是不需要减padding的。
```

## Margin

```
margin用法    （外边距、边界）                                               		
	1:margin在元素外围，不会撑大元素的大小
	2:作用:控制元素与元素之间的间距。
	3：给单一方向添加margin
		margin-left/right/top/bottom
	4 :margin设置方法：
		margin:30px;    四周
		margin:10px 30px;     上下     左右
		margin:10px 30px 50px    上   左右    下
		margin:10px 30px 50px 100px     上右下左
	5:margin:0 auto;
		让当前元素在父元素里面左右居中。
	6:margin常出现的bug
		a:两个相邻元素上下的margin值 不会叠加 按照较大值设置。
		b:如果父元素和第一个子元素没有浮动的情况下，给第一个子元素添加margin-top,会错误放在父元素上面。
	7: margin值可以接收负数。
```

## 写网页的规范

```
	1：每一个项目尽量保证命名风格一致
         eg:
            外围结构： 语义化命名  驼峰式命名法
            版心区域： 连字符    nav-con     news-con
            内部板块： 下划线    nav_left  news_right

    2: 文件的规划：
        css文件：
            a: 重置样式表 （ 清除页面元素默认样式 ）
            b: 公共样式表 （ 当前项目，每个页面都用到的样式 ）
            c: 属于自身样式表（ 每个页面需要有自己的样式表 ）
```

## 文本溢出

1.overflow

```
visible:默认值，内容不会被修剪，会呈现在元素框之外；
hidden：内容会被修剪，并且其余内容是不可见的；
scroll：内容会被修剪，但是浏览器会显示滚动条，以便查看其余的内容;
auto：如果内容被修剪，则浏览器会显示滚动条，以便查看其他的内容;
inherit：规定应该从父元素继承overflow属性的值。
```

2.white-space

```
normal：默认值，多余空白会被浏览器忽略只保留一个；
pre：空白会被浏览器保留；
pre-wrap：保留一部分空白符序列，但是正常的进行换行；
pre-line:合并空白符序列，但是保留换行符；
nowrap:文本不会换行，文本会在同一行上继续，直到遇到<br/>标签为止;
```

3.text-overflow

```
clip：不显示省略号（...），而是简单的裁切;
ellipsis：当对象内文本溢出时，显示省略标记；
    省略号设置：
    text-overflow属性仅是：当文本溢出时是否显示省略标记，并不具备其它的样式属性定义，要实现溢出时产生省略号的效果还需定义：
    1、容器宽度：width：value；（px、%，都可以）
    2、强制文本在一行内显示:white-space：nowrap;
    3、溢出内容为隐藏：overflow：hidden；
    4、溢出文本显示省略号：
         text-overflow：ellipsis;

    注：必须是单行文本才能设置本文溢出！！！
```

# `Day 06`

## 元素类型

```
根据css显示分类，XHTML元素被分为

三种类型:
	块状元素，内联元素，可变元素

&&

三种类型：	
	块状元素，内联元素，内联块元素(css2.1增加)
```

## 块状元素的特点

```
A:块状元素在网页中就是以块的形式显示，所谓块状就是元素显示为矩形区域，
B:默认情况下，块状元素都会占据一行，通俗地说，两个相邻块状元素不会出现并列显示的现象；默认情况下，块状元素会按顺序自上而下排列。
C:块状元素都可以定义自己的宽度和高度。 
D:块状元素一般都作为其他元素的容器，它可以容纳其它内联元素和其它块状元素。我们可以把这种容器比喻为一个子。
```

## 内联元素的特点

```
A:内联元素的表现形式是始终以行内逐个进行显示；
B:内联元素没有自己的形状，不能定义它的宽和高,它显示的宽度、高度只能根据所包含内容的高度和宽度来确定，它的最小内容单元也会呈现矩形形状；
C:内联元素也会遵循盒模型基本规则，如可以定义padding,border,margin,background等属性，但个别属性不能正确显示;(padding-top:;margin-top/bottom:;)
```

## 可变元素

```
需要根据上下文关系确定该元素是块元素或者内联元素。
```

## 常见的标签

1、块

```
div -最常用的块级元素
dl - 和dt-dd 搭配使用的块级元素
form - 交互表单
h1 -h6- 大标题
hr - 水平分隔线
ol – 有序列表
p - 段落
ul - 无序列表
li
fieldset - 表单字段集
colgroup-col - 表单列分组元素
table-tr-td  表格及行-单元格
```

2、内联

```
a –超链接（锚点）                               
b - 粗体(不推荐) 
br - 换行                             
i - 斜体
em - 强调                             
img - 图片                         
input - 输入框               
label - 表单标签                  
span - 常用内联容器，定义文本内区块
strong - 粗体强调
sub - 下标   
sup - 上标
textarea - 多行文本输入框
u - 下划线
select - 项目选择  
```

注：所有添加浮动的元素都能设置宽度和高度！！！！！

## 元素类型的转换

1、display属性

```
盒子模型可通过display属性来改变默认的显示类型，检索或者是设置元素所生成的元素类型。
```

2、display属性值

| none               | 此元素不会被显示。                                           |
| ------------------ | ------------------------------------------------------------ |
| **block**          | **此元素将显示为块级元素，此元素前后会带有换行符。**         |
| **inline**         | 此元素会被显示为内联元素，元素前后没有换行符。               |
| **inline-block**   | **行内块元素。（CSS2.1 新增的值）**                          |
| **list-item**      | **此元素会作为列表显示。**                                   |
| run-in             | 此元素会根据上下文作为块级元素或内联元素显示。               |
| compact            | CSS 中有值 compact，不过由于缺乏广泛支持，已经从 CSS2.1 中删除。 |
| marker             | CSS 中有值 marker，不过由于缺乏广泛支持，已经从 CSS2.1 中删除。 |
| table              | 此元素会作为块级表格来显示（类似 <table>），表格前后带有换行符。 |
| inline-table       | 此元素会作为内联表格来显示（类似 <table>），表格前后没有换行符。 |
| table-row-group    | 此元素会作为一个或多个行的分组来显示（类似 <tbody>）。       |
| table-header-group | 此元素会作为一个或多个行的分组来显示（类似 <thead>）。       |
| table-footer-group | 此元素会作为一个或多个行的分组来显示（类似 <tfoot>）。       |
| table-row          | 此元素会作为一个表格行显示（类似 <tr>）。                    |
| table-column-group | 此元素会作为一个或多个列的分组来显示（类似 <colgroup>）。    |
| table-column       | 此元素会作为一个单元格列显示（类似 <col>）                   |
| table-cell         | 此元素会作为一个表格单元格显示（类似 <td> 和 <th>）          |
| table-caption      | 此元素会作为一个表格标题显示（类似 <caption>）               |
| inherit            | 规定应该从父元素继承 display 属性的值。                      |

```
A、大部分块元素display属性值默认为block，其中列表li的默认值为list-item。
B、大部分内联元素的display属性值默认为inline,其中img,input，默认为inline-block（行内块元素）。
```

3、inline-block（行内块元素）

```
特点:
    1: 在一行内逐个显示
    2: 能直接添加大小
    设置一个元素在一个容器中垂直居中，必须更改默认的display属性值为inline-block;并加上同级元素（标尺）（同级元素[标尺]样式设置为
	vertical-align:middle;width:0;height:100%;display:inline-block;）
	三个条件：
		1：必须给容器（父元素）加上text-align:center;
		2:必须给当前元素转成行内块元素（display:inline-block;）再给当前元素加上		 
	vertical-align:middle;
		3：在当前元素的后面（没有回车）加上同级元素span;并对span进行
	vertical-align:middle;width:0;height:100%;display:inline-block 
```

## 置换元素

```
一、引题
在之前的浅谈HTML中的块级元素和内联元素中了解到了内联元素一般是不能设置宽高的，但是也有特殊。比如img是内联元素，但可以设置宽高，这肯定让不少人迷惑。这样我们就要引入HTML中置换元素的概念（非置换元素在w3c中没有给出明确的解释，姑且我们就把除置换元素外的元素当作非置换元素吧）。

二、置换元素与非置换元素
a) 置换元素：浏览器根据元素的标签和属性，来决定元素的具体显示内容。 
例如：浏览器会根据<img>标签的src属性的值来读取图片信息并显示出来，而如果查看(x)html代码，则看不到图片的实际内容；<input>标签的type属性来决定是显示输入框，还是单选按钮等。 (x)html中的<img>、<input>、<textarea>、<select>都是置换元素。这些元素往往没有实际的内容，即是一个空元素。

置换元素在其显示中生成了框，这也就是有的内联元素（img,input）能够设置宽高的原因。

b) 不可替换元素（非置换元素）：(x)html 的大多数元素是不可替换元素，即其内容直接表现给用户端（如浏览器）。
```

## 垂直居中属性

```
垂直对齐:
    vertical-align:
        top
        bottom
        middle
        baseline   基线对齐
        
    1:确定一个参照物的中线:
        在要做上下居中元素的后面(不要回车),添加一个span
        span{
            width:0px;
            height:100%;
            display:inline-block;
            vertical-align: middle;
        }

    2:让元素左右居中:
        给父元素添加text-align:center;
    
    3:要做居中的元素设置  
        display:inline-block;
        vertical-align: middle;
```

## 图片display的值为inline但是为什么能直接设置宽高

```
图片display的值为inline但是为什么能直接设置宽高

img会通过属性src来决定在页面中的显示状态
input会通过属性type来决定在页面中显示状态.
```

## 从另一个角度对标签分类

```
置换元素 与 非置换元素

置换元素:通过属性或者标签的类型来决定在页面中的显示状态.
		因为置换元素在页面渲染的过程中生成一个框,这个框是能添加宽高的.
```

## 元素嵌套规则

```
1:尽量让块状元素做为父元素出现
2:内联元素的子元素尽量也是内联元素
3:h1 - h6 之间不能互相嵌套
4:p标签不能互相嵌套\p标签中尽量放内联元素
```



# `Day 07 `   and   `Day 08`

## 元素类型加餐

```
   元素类型转换：
        display:
            block
            inline
            none
            inline-block
            list-item

    块和内联的显示的特点：
        1:块状元素在不添加宽度的时候，宽度跟随父元素宽度
        2：内联元素宽度是被内容撑开
        3：内联元素在默认的情况下，如果给父元素添加text-align\line-height,能使整个内联元素	位置放生改变。
        4：如果给一个元素添加了display:none;这个元素在页面加载的时候，也是会加载的，只是在页	面渲染的过程中是不显示的。
```

## html+css渲染流程

![](C:\Users\86252\Desktop\H5练习\htmlcss渲染流程.png)

## CSS文档流

- CSS 有三种基本的定位机制：**普通流、浮动流、定位流**。

## Position

- position定位属性，检索或设置对象的定位方式

```
(一：把元素拿起来)
    position:;定位属性
        作用：设置或者是检索元素得定位方式 

(二：确定参照物)
    1：position:static;  [静态定位]     position属性得默认值。

    2：position:absolute; [绝对定位]
        参照物：已经添加定位的父元素。
        特点:
            a：如果父元素都没有定位，或者是没有父元素 参照物是整个文档。
            b: 脱离文档流，不再占据空间。

    3：position:relative;   [相对定位]
        参照物：相对于自身默认的位置为参照物
        特点：
            a: 不会脱离文档流，占据空间。
            b: 一般给绝对定位提供参照物的。
            
    4:position:fixed;   [固定定位]
        参照物：浏览器窗口
        特点：
            a:脱离文档流，不占据空间

    5:position:sticky   [黏性定位]
        原理：position:relative; 和 position:fixed；结合体
            当添加黏性定位的元素，没有超出浏览器窗口的时候，执行的是position:relative;  当元素超出浏览器窗口执行的是position:fixed;


(三：固定坐标)
    left属性
    right属性
    top属性
    bottom属性值
```

- 属性值：

| s**tatic**   | **默认值。位置设置为 static 的元素会正常显示，它始终会处于文档流给予的位置（static元素会忽略任何 top、bottom、left或 right 声明）** |
| ------------ | ------------------------------------------------------------ |
| **absolute** | **相对于父级元素、的绝对定位，浮出、脱离布局流，它不占据空间，就是我们所说的层，其位置相对于最近的已定位父元素而言的位置，可直接指定“left”、“top”、“right” 以及 “bottom”属性。若父级都没有定位，则以html（根元素）。(层叠的顺序z-index:value)** |
| **relative** | **是相对于默认位置的相对定位，通过设置left、top、right、bottom值可将其移至相对于其正常位置的地方（相对于自己的开始的位置发生的位置上的移动，【不会破坏正常的布局流，占据空间】）** |
| **fixed**    | **相对浏览器的绝对定位，是相对于浏览器窗口的指定坐标进行定位。此元素的位置可通过 "left"、"top"、"right" 以及"bottom" 属性来规定。不论窗口滚动与否，元素都会留在那个位置。** |
| **sticky**   | **可以看出是`position:relative`和`position:fixed`的结合体——当元素在屏幕内，表现为relative，就要滚出显示器屏幕的时候，表现为fixed。** |

```
绝对定位和相对定位的区别

1、参照物不同，绝对定位的参照物是包含块（已定位的父元素），相对定位的参照物是元素本身默认的位置；

2、绝对定位将对象从文档流中拖离出来因此不占据空间，相对定位不破坏正常的文档流顺序无论是否进行移动，元素仍然占据原来的空间。
```

## 包含块

```
包含块是绝对定位的基础，包含块就是为定位元素提供坐标，偏移和显示范围的参照物，即确定绝对定位的偏移起点和百分比长度的参考；

默认状态下，html是一个大的包含块，所有绝对定位的元素都是根据窗口来定自己所处的位置和百分比大小的显示的，如果我们定义了包含元素为包含元素块以后，对于被包含的绝对定位元素来说，就会根据最接近的具有定位功能的上级包含元素来定位自己的显示位置。

定义元素为包含块：给绝对定位元素的父元素添加声明position：relative；给要做定位的子元素添加  position:absolute。

BUG：如果子元素没有宽度，加上position:absolute，会造成宽度消失。
```

## 定位元素层次关系

```
z-index : auto |number

检索或设置对象的层叠顺序。
auto：默认值。
number:无单位的整数值。可为负数
没有设置z-index时，最后写的对象优先显示在上层，设置后，数值越大，层越靠上；
```

## 过渡属性

```
    transition属性 （过渡）
        属性值：
            参与过渡的属性（默认的为all）
            时间（过渡的时间  s  ms）
            延迟时间  s  ms
            运动的类型 linear(匀速)


    注：transition必须通过事件触发，如 :hover

    运动类型：贝塞尔曲线https://cubic-bezier.com/#.33,1.84,.47,-0.88
```

## opacity透明

```
    rgba   让背景色、文本颜色...透明



    opacity属性：( IE浏览器低版本不能识别 )
        属性值：  0  -  1  数值    0.5半透明


    兼容IE写法：
        fliter:alpha(opacity=100);
```

## 元素在浏览器窗口居中的方法

```
        1：
            position:fixed;
            left:50%;
            top:50%;
            margin:-高度一半 0 0 -宽度一半

        2：
            position:fixed;
            left:0;right:0;
            top:0;bottom:0;
            margin:auto;
```

## 子元素在父元素里面左右上下居中

```
        .box{
            width:500px;
            height:400px;
            background:orange;
            margin:100px auto;
            /* 形成参照物 */
            position: relative;
        }
        h2{
            width:50%;
            height:20%;
            background:blue;
            position:absolute;
            left:0;right:0;
            top:0;bottom:0;
            margin:auto;
        }
```

## 子元素大于父元素高度的时候怎么保存左右居中

```
        .box{
            width:600px;
            height:350px;
            background:orange;
            margin:0 auto;
            position:relative;
        }
        .con{
            width:1000px;
            height:300px;
            background:blue;
            position:absolute;
            left:50%;
            margin-left:-500px;
        }
```

## 锚点

```
命名锚点链接的应用：

命名锚点的作用：在同一页面内的不同位置进行跳转。
制作锚标记：
1)给元素定义命名锚记名
语法：<标记   id="命名锚记名">    </标记>

2)命名锚记连接
语法：<a href="#命名锚记名称"></a>
```

## 宽度自适应

```
    宽度自适应：
        块状元素当宽度不去设置的时候、或者是设置width:100%;
        那么宽度是跟随父元素宽度显示。


    如果一个元素没设置宽度，并且设置了绝对定位、浮动、固定定位 ，让元素脱离文本流，宽度是内容撑开的宽度
```

## 高度自适应的第一种情况

- 高度自适应第一种情况需求：

```
a: 当内容增多的时候，让内容撑开盒子的高度
b: 如果内容偏少或者是没有内容的时候，让盒子保持一个最小高度。
```

- height属性：

```
默认值为auto;
一个元素设置height:auto 或者 是不设置的时候：元素的高度是被内容撑开的
```

- 最小高度

```
min-height:;
执行逻辑：
    如果内容超出当前元素，元素高度则被内容撑开，
    如果内容小于当前元素高度，元素会保持一个最小高度。
```

- 兼容问题（了解）：

```
        min-height   ->   IE6不能识别
        IE6把height直接识别为最小高度。

        
        解决方法：
            1：
                _height:value;
                min-height:value;
            2：
                min-height:value;
                height:auto!important;
                height:value;
```

- 过滤器

```
  1.下划线属性过滤器
  当在一个属性前面增加了一个下划线后，由于符合标准的浏览器不能识别带有下划线的属性而忽略了这个声明，但是在IE6及更低版本浏览器中会继续解析这个规则。
  
  语法：选择符{_属性：属性值；}
 

  2. !important关键字过滤器
  
  它表示所附加的声明具有最高优先级的意思。但由于IE6及更低版本不能识别它，
我们可以利用IE6的这个Bug作为过滤器来兼容ＩＥ６和其它标准浏览器。

  语法：选择符{属性：属性值!important;}
 

  3. *属性过滤器

  当在一个属性前面增加了*后，该属性只能被IE7浏览器识别，其它浏览器混略该属
性的作用。

 语法：选择符{*属性：属性值；}


  4.   \9  ：IE版本识别；其它浏览器都不识别
语法：选择符{属性：属性值\9;}

  5.   \0  :   IE8 及以上版本识别；其它浏览器都不识别
```

## 高度坍塌

- 高度坍塌出现的场景：

```
当父元素没有设置高度，子元素添加浮动，父元素会出现高度塌陷
即使设置高度height或min-height 浮动的子元素也不会撑开父元素的高度。
```

- 高度坍塌的解决方法：

```
        1：给高度塌陷的元素添加overflow:hidden;
            原理：overflow:hidden触发了BFC ( BFC:布局逻辑 )
                BFC规定：计算元素高度的时候，里面的浮动元素也参与计算。
            弊端：overflow:hidden;溢出隐藏  隐藏掉定位到父元素以外的内容。

        2：在浮动元素的最下方，添加一个空的div  并且给div{ clear:both; }
            原理：clear:both;  忽略上方元素预留的空间
            弊端：会产生大量的代码冗余

        3：万能清楚法
            高度塌陷的元素:after{
                content:" ";
                display:block;
                height:0;
                overflow:hidden;
                clear:both;
                visibility:hidden;
            }
        注：zoom：1 设置或检索对象的缩放比例，触发IE浏览器的haslayout属性，解决浮动，margin重叠等一些问题。
```

- clear的另一种理解

```
    clear:        闭合浮动空间！！
        属性值：
        left
        right
        both
```

## 伪元素（伪对象）选择器

```
    1：
        ::after{
            //content:"";
            content:url();
        }
        在当前元素的内容最后添加一些内容。
        
		语法：选择符:：after{content:”文字”;}
	 		选择符:：after{content:url(图片路径)；}
	
		如：div::after{content:url(logo.jpg);}
  			 div::after{content:"文本内容";} 

    2:
        ::before{
            //content:"";
            content:url();
        }
        在当前元素的内容最前面添加一些内容。


    3:
        ::first-letter{
            控制第一个字符的样式
        }
        说明：
    	*(该伪元素只能用于块级元素)
    4：
        ::first-line{
            控制第一行的样式
        }
        说明：
        *(该伪元素只能用于块级元素。)
```

## visibility:hidden;与display:none;的区别

```
    display:none;
        完全隐藏，不占据空间

    visibility:hidden;
        隐藏元素，占据空间
```

# `Day 09`

## 高度自适应第二种情况

```
    子元素高度跟随父元素：

    实现全屏的元素：
        html,body{
            height:100%;
        }
```

## BFC

```
    BFC:汉译 “ 块级格式化上下文 ”  ->  "独立渲染区"  -> 布局逻辑

    BFC布局上的规定：
        一、内部的Box会在垂直方向，一个接一个地放置。
        二、Box垂直方向的距离由margin决定。属于同一个BFC的两个相邻Box的margin会发生重叠（按照最大margin值设置）
        三、每个元素的margin box的左边， 与包含块border box的左边相接触
        四、BFC的区域不会与float box重叠。
        五、BFC就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。
        六、计算BFC的高度时，浮动元素也参与计算


    触发BFC的条件：
        根元素(html)
        float属性不为none
        position为absolute或fixed
        display为inline-block, table-cell, table-caption, flex, inline-flex
        overflow不为visible（默认值）（一般用这个，上面的会影响布局）



    BFC应用：
        1：
            用overflow:hidden; 解决高度坍塌

        2：
            防止margin上下重叠

        3：
            实现自适应两栏布局
```

## calc()功能函数

```
calc()  // 功能函数，能进行不同单位的计算（）内部放的是一个表达式
```

## 图片整合（精灵图、css **sprites**、css精灵、雪碧图）

```
优点:
	（1）CSS Sprites能很好地减少网页的http请求，从而大大的提高页面的性能，这是CSS Sprites最大的优点，也是其被广泛传播和应用的主要原因；
	（2）CSS Sprites能减少图片的字节；
	（3）CSS Sprites解决了网页设计师在图片命名上的困扰，只需对一张集合的图片命名，不需要对每一个小图片进行命名，从而提高了网页制作效率。
	（4）CSS Sprites只需要修改一张或少张图片的颜色或样式来改变整个网页的风格。
	
缺点:
	（1）图片合并麻烦：图片合并时，需要把多张图片有序的合理的合并成一张图片，并留好足够的空间防止版块出现不必要的背景。
	（2）图片适应性差：在高分辨的屏幕下自适应页面，若图片不够宽会出现背景断裂。
	（3）图片定位繁琐：开发时需要通过工具测量计算每个背景单元的精确位置。
	（4）可维护性差：页面背景需要少许改动，可能要修改部分或整张已合并的图片，进而要改动css。在避免改动图片的前提下，又只能（最好）往下追加图片，但这样增加了图片字节。

    
整合的规则：
    1：图片的背景色一定是透明
    2：根据项目需求，图标之间留出足够间距
    3：图标尽量上下排列
```

## 浏览器兼容

```
    浏览器主流内核（核心源码）：
        Trident   代表作：IE
        Gecko     代表作：Mozilla
        WebKit    代表作：苹果 & 谷歌旧版本
        Blink     代表作：谷歌 & 欧鹏

        Presto   ( Opera前内核 已经废弃 )
        
为什么会形成浏览器兼容问题？
    由于各大主流浏览器由不同的厂家开发，所用的核心架构和代码也很难重和，这就为各种莫名其妙的Bug(代码错误）提供了温床。再加上各大厂商出于自身利益考虑而设置的种种技术壁垒，都让CSS应用起来比想象得要麻烦。浏览器的兼容问题是我们必须去克服的。
```

## CSS Bug、CSS Hack和Filter

```
CSS Bug: CSS样式在各浏览器中解析不一致的情况，或者说CSS样式在浏览器中不能正确显示的问题称为CSS bug.
CSS Hack:  CSS中，Hack是指一种兼容CSS在不同浏览器中正确显示的技巧方法，因为它们都属于个人对CSS代码的非官方的修改，或非官方的补丁。有些人更喜欢使用patch(补丁)来描述这种行为。
Filter:表示过滤器的意思，它是一种对特定的浏览器或浏览器组显示或隐藏规则或声明的方法。本质上讲，Filter是一种用来过滤不同浏览器的Hack类型。
```

## 常见的BUG

```
低版本IE(了解)

1)图片有边框BUG
当图片加<a href=“#”></a>在IE上会出现蓝色边框
Hack:给图片加border:0;或者border:none;


2)  双倍浮向（双倍边距）（只有IE6出现）
描述：当Ie6及更低版本浏览器在解析浮动元素时，会错误地把浮向边边界（margin）加倍显示。如果一个元素添加float:left; 并且有margin-left;在IE6中显示两倍的margin值.
hack:给浮动元素添加声明：display:inline;


3)默认高度（IE6、IE7）
描述：在IE6及以下版本中，部分块元素拥有默认高度（在16px左右；）
hack1:给元素添加声明：font-size:0;
hack2：给元素添加声明：overflow:hidden;

非IE  BUG;

4)图片间隙
div中的图片间隙BUG
描述：在div中插入图片时，图片会将div下方撑大大约三像素。
hack1:将</div>与<img>写在一行上；
hack2:将<img>转为块状元素，给<img>添加声明：display:block;


5)按钮元素默认大小不一

描述：各浏览器中按钮元素大小不一致
hack1： 统一大小/（用a标记模拟）
hack2:input外边套一个标签，在这个标签里写按钮的样式，把input的边框去掉。
hack3:如果这个按钮是一个图片，直接把图片作为按钮的背景图即可。


6)表单元素对齐不一致
描述：表单元素行高对齐方式不一致
hack:给表单元素添加声明：float:left;


7)鼠标指针bug
描述：cursor属性的hand属性值只有IE9以下浏览器识别，其它浏览器不识别该声明，cursor属性的pointer属性值IE6.0以上版本及其它内核浏览器都识别该声明。
hack:    如统一某元素鼠标指针形状为手型，
应添加声明：cursor:pointer


cursor:         ;
auto默认
crosshair加号
text文本
wait等待
help帮助
progress过程
inherit继承
move移动
ne-resize向上或向右移动
pointer手形



8)透明属性
兼容其他浏览器写法：opacity:value;(value的取值范围0-1;
	例：opacity:0.5;)
IE浏览器写法：filter:alpha(opacity=value);取值范围 1-100(整数)
```

## 优化

1）页面主题优化

```
实事求是的写下自己网站的名字，网站的名字要合理，最好包含网站的主要内容。
```

2）页面头部优化

```html
<meta name="keywords"   content="" />向搜索引擎说明你的网页的关键词；
<meta name="description"    content=""/>告诉搜索引擎你的站点的主要内容；
```

```
说明
	1、“描述”部分应该用近乎描述的语言写下一段介绍你网站的文字，在这其中，你应该适当的对你网站的特色内容加以重复以求突出；
	2、“关键字”部分应该列出你认为合适的，能突出网站内容的关键字就可以了，关键字不要设置太多，可设置10---8个，搜索引擎只会浏览靠前的几个关键字。
```

3）超链接优化

```
1、采用纯文本链接，少用，最好是别用Flash动画设置链接，因为搜索引擎无法识别Flash上的文字.
2、按规范书写超链接，这个title属性，它既可以起到提示访客的作用，也可以让搜索引擎知道它要去哪里.
3、最好别使用图片热点链接，理由和第一点差不多
```

4）图片优化

```
图片优化并不是修改图片的大小、颜色，而是你应该为每个标签加上alt属性，alt属性的作用是当图片无法显示时以文字作为替代显示出来，而对于SEO来说，它可以令搜索引擎有机会索引你网站上的图片，对于一些确实没什么意义的图片，最好也不要省略alt，而应该留空，即 alt=""。
```

5）PageRank（pr值,友情链接）

```
PR值是Google提出的一个重要参数，它标明了某个网站的重要程度，那么pr值是如何确定的呢？目前普通的解释为：假如有ABC三个网站，彼此互作友情链接，那么当一个访客通过A上的友情链接来到B时，Google就认为A为B投了“一票”，同理，如果有人从C访问B，那么B又得一票，如果全世界的网站上都有B的友情链接，B就是世界上最重要的网站了！
```

